'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _general = require('../general');

var _ShopItem = require('./ShopItem');

var _ShopItem2 = _interopRequireDefault(_ShopItem);

var _helpers = require('../../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Shop = function () {
  function Shop(_ref) {
    var name = _ref.name,
        _ref$items = _ref.items,
        items = _ref$items === undefined ? [] : _ref$items;

    _classCallCheck(this, Shop);

    this._shopItems = [];
    this._name = name;
    items.forEach(this.addItem);
  }

  _createClass(Shop, [{
    key: 'getName',
    value: function getName() {
      return this._name;
    }
  }, {
    key: 'setName',
    value: function setName(name) {
      this._name = name;
    }
  }, {
    key: 'addItem',
    value: function addItem(_ref2) {
      var item = _ref2.item,
          price = _ref2.price;

      if (!(price instanceof _general.Currency)) throw new Error('Price must be a Currency instance');
      if (!(item instanceof _ShopItem2.default)) {
        item = (0, _helpers.clone)(item);
        if (!this._getItem(item)) {
          item = new _ShopItem2.default({ item: item, price: price });
          this._shopItems.push(item);
        } else {
          this._getItem(item).addUnit();
        }
      }
    }
  }, {
    key: 'getShopItems',
    value: function getShopItems() {
      return this._shopItems;
    }
  }, {
    key: 'removeItem',
    value: function removeItem(item) {
      if (item instanceof _ShopItem2.default) {
        if (this._shopItems.indexOf(item) === -1) {
          this._errorItemDoesntExist();
        } else if (this._shopItems.indexOf(item) > -1) {
          var listItem = this._shopItems[this._shopItems.indexOf(item)];
          listItem.removeUnit();
          if (listItem.getQuantity() <= 0) {
            this._shopItems.splice(this._shopItems.indexOf(item), 1);
          }
        }
      } else {
        var shopItem = this._getItem(item);
        if (!shopItem) this._errorItemDoesntExist();
        shopItem.removeUnit();
      }
    }
  }, {
    key: 'interaction',
    value: function interaction(character) {
      return {
        buy: this._buyer(character),
        sell: this._seller(character)
      };
    }
  }, {
    key: '_seller',
    value: function _seller(character) {
      return function (shopItem) {
        return new Promise(function (resolve, reject) {
          if (!(shopItem instanceof _ShopItem2.default)) shopItem = new _ShopItem2.default(shopItem);
          var characterItem = shopItem.getItem();
          if (!character.inventory.hasItem(characterItem)) {
            return reject(new Error('Character must have the item to sell'));
          }
          character.inventory.drop(characterItem);
          return character.bank.earn(shopItem.getPrice()).then(resolve).catch(reject);
        });
      };
    }
  }, {
    key: '_buyer',
    value: function _buyer(character) {
      var _this = this;

      return function (shopItem) {
        return new Promise(function (resolve, reject) {
          if (_this._shopItems.indexOf(shopItem) === -1) return reject(new Error('Item not available in shop'));
          var price = shopItem.getPrice();
          var characterCurrency = character.bank.get(price.getName());
          if (characterCurrency.getValue() >= price.getValue()) {
            character.bank.lose(price).then(function () {
              _this.removeItem(shopItem);
              return character.inventory.carry(shopItem.getItem());
            }).then(resolve).catch(reject);
          } else {
            reject(new Error('Character can\'t afford'));
          }
        });
      };
    }
  }, {
    key: '_getItem',
    value: function _getItem(item) {
      return this._shopItems.filter(function (shopItem) {
        return shopItem.getItem().getName() === item.getName();
      })[0] || null;
    }
  }, {
    key: '_errorItemDoesntExist',
    value: function _errorItemDoesntExist() {
      throw new Error('Shop item doesn\'t exist');
    }
  }]);

  return Shop;
}();

exports.default = Shop;
module.exports = exports['default'];