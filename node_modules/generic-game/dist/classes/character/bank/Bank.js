'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ = require('../..');

var _helpers = require('../../../helpers');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bank = function () {
  function Bank(_ref) {
    var _ref$currencies = _ref.currencies,
        currencies = _ref$currencies === undefined ? [] : _ref$currencies;

    _classCallCheck(this, Bank);

    this._currencies = this._parseCurrencies(currencies);
  }

  _createClass(Bank, [{
    key: 'setCurrencies',
    value: function setCurrencies(currencies) {
      this._currencies = this._parseCurrencies(currencies);
    }
  }, {
    key: 'getCurrencies',
    value: function getCurrencies() {
      return this._currencies;
    }
  }, {
    key: 'lose',
    value: function lose(currency) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        currency = _this._parseCurrency(currency);
        currency = (0, _helpers.clone)(currency);
        var name = _this._parseName(currency.getName());
        if (_this._currencies[name]) {
          _this._currencies[name].putValue(-Math.abs(currency.getValue()));
        } else {
          currency.setValue(-Math.abs(currency.getValue()));
          _this._currencies[name] = currency;
        }
        resolve(_this._currencies[name]);
      });
    }
  }, {
    key: 'get',
    value: function get(currency) {
      var name = currency && typeof currency !== 'string' && currency.getName ? currency.getName() : currency;
      name = this._parseName(name);
      return name ? this._currencies[name] || this._emptyCurrency() : this._emptyCurrency();
    }
  }, {
    key: 'earn',
    value: function earn(currency) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        currency = _this2._parseCurrency(currency);
        currency = (0, _helpers.clone)(currency);
        var name = _this2._parseName(currency.getName());
        if (_this2._currencies[name]) {
          _this2._currencies[name].putValue(Math.abs(currency.getValue()));
        } else {
          _this2._currencies[name] = currency;
        }
        resolve(_this2._currencies[name]);
      });
    }
  }, {
    key: '_parseName',
    value: function _parseName(name) {
      return String(name).toLowerCase();
    }
  }, {
    key: '_emptyCurrency',
    value: function _emptyCurrency() {
      return new _.Currency({
        name: 'Empty',
        symbol: 'N/A',
        value: 0
      });
    }
  }, {
    key: '_parseCurrencies',
    value: function _parseCurrencies(currencies) {
      var _this3 = this;

      if (Array.isArray(currencies)) {
        return currencies.reduce(function (obj, currency) {
          obj[_this3._parseName(currency.name || currency.getName())] = _this3._parseCurrency(currency);
          return obj;
        }, {});
      } else if (currencies instanceof Object) {
        return Object.keys(currencies).reduce(function (obj, name) {
          var data = { name: name };
          if (typeof currencies[name] === 'number') {
            data.value = currencies[name];
          } else if (currencies[name] instanceof Object) {
            data = Object.assign(data, currencies[name]);
          }
          obj[_this3._parseName(name)] = _this3._parseCurrency(data);
          return obj;
        }, {});
      } else {
        return [];
      }
    }
  }, {
    key: '_parseCurrency',
    value: function _parseCurrency(currency) {
      return (0, _helpers.parseToInstance)(_.Currency, [currency])[0];
    }
  }]);

  return Bank;
}();

exports.default = Bank;
module.exports = exports['default'];