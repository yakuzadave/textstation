'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _general = require('../../general');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Inventory = function () {
  function Inventory(_ref) {
    var _ref$items = _ref.items,
        items = _ref$items === undefined ? [] : _ref$items,
        _ref$capacity = _ref.capacity,
        capacity = _ref$capacity === undefined ? 1 : _ref$capacity;

    _classCallCheck(this, Inventory);

    if (items.length && !this._isValidItems(items)) throw new Error('Invalid items');
    this._items = items;
    this._capacity = capacity;
  }

  _createClass(Inventory, [{
    key: 'carry',
    value: function carry(item) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        if (!(item instanceof _general.Item)) return reject(new Error('Not an Item instance'));

        if (_this.getWeight() + item.getWeight() > _this._capacity) {
          reject(new Error('Exceeded inventory capacity'));
        } else {
          _this._items.push(item);
          resolve(_this._items[_this._items.length - 1]);
        }
      });
    }
  }, {
    key: 'drop',
    value: function drop(item) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        if (!(item instanceof _general.Item)) return reject(new Error('Not an Item instance'));
        _this2._items.splice(_this2._items.indexOf(item), 1);
        resolve(item);
      });
    }
  }, {
    key: 'get',
    value: function get(index) {
      if (index >= 0 && index <= this._items.length - 1) {
        var item = this._items[index];
        this._items.splice(index, 1);
        return item;
      } else {
        return null;
      }
    }
  }, {
    key: 'getItems',
    value: function getItems() {
      return this._items;
    }
  }, {
    key: 'getWeight',
    value: function getWeight() {
      if (this._items.length > 0) {
        return this._items.reduce(function (a, b) {
          return a + b.getWeight();
        }, 0);
      } else {
        return 0;
      }
    }
  }, {
    key: 'hasItem',
    value: function hasItem(item) {
      return this._items.filter(function (_item) {
        return _item.getName() === item.getName();
      }).length > 0;
    }
  }, {
    key: 'increaseCapacity',
    value: function increaseCapacity(amount) {
      if (isNaN(parseFloat(amount))) throw new Error('Inventory increase capacity argument must be a number');
      this._capacity += amount;
    }
  }, {
    key: '_isValidItems',
    value: function _isValidItems(items) {
      return items.filter(function (item) {
        return !(item instanceof _general.Item);
      }).length === 0;
    }
  }]);

  return Inventory;
}();

exports.default = Inventory;
module.exports = exports['default'];