'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Experience = function () {
  function Experience(_ref) {
    var _ref$value = _ref.value,
        value = _ref$value === undefined ? 0 : _ref$value;

    _classCallCheck(this, Experience);

    this._value = value;
    this._algorithm = function (value) {
      return Math.floor(value / 10);
    };
  }

  _createClass(Experience, [{
    key: 'getExperience',
    value: function getExperience() {
      return this._value;
    }
  }, {
    key: 'setAlgorithm',
    value: function setAlgorithm(algorithm) {
      this._algorithm = algorithm;
    }
  }, {
    key: 'gain',
    value: function gain(amount) {
      var snapshot = this._getSnapshot();
      if (amount instanceof Experience) {
        this._value += amount.getExperience();
      } else if (typeof amount === 'number') {
        this._value += amount;
      }
      return Promise.resolve(snapshot.compare());
    }
  }, {
    key: 'lose',
    value: function lose(amount) {
      var snapshot = this._getSnapshot();
      this._value -= amount;
      if (this._value < 0) {
        this._value = 0;
      }
      return Promise.resolve(snapshot.compare());
    }
  }, {
    key: '_getSnapshot',
    value: function _getSnapshot() {
      var snapshot = {
        experienceOld: this.getExperience(),
        experienceChange: 0,
        levelOld: this.computeLevel(),
        levelChange: 0
      };
      return {
        compare: function () {
          var newLevel = this.computeLevel();
          var newExperience = this.getExperience();
          snapshot.levelChange = Math.abs(newLevel) - Math.abs(snapshot.levelOld);
          snapshot.experienceChange = Math.abs(newExperience) - Math.abs(snapshot.experienceOld);
          snapshot.levelNew = newLevel;
          snapshot.experienceNew = newExperience;
          return snapshot;
        }.bind(this)
      };
    }
  }, {
    key: 'computeLevel',
    value: function computeLevel() {
      return this._algorithm(this._value);
    }
  }]);

  return Experience;
}();

exports.default = Experience;
module.exports = exports['default'];