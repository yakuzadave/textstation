'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _helpers = require('../../../helpers');

var _ = require('../..');

var _constants = require('../../../constants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Characteristics = function () {
  function Characteristics(_ref) {
    var _ref$characteristics = _ref.characteristics,
        characteristics = _ref$characteristics === undefined ? [] : _ref$characteristics,
        _ref$setDefault = _ref.setDefault,
        setDefault = _ref$setDefault === undefined ? true : _ref$setDefault;

    _classCallCheck(this, Characteristics);

    this._characteristics = this._parseCharacteristics(characteristics);
    if (setDefault) this._checkDefaultCharacteristics();
  }

  _createClass(Characteristics, [{
    key: 'setCharacteristics',
    value: function setCharacteristics(characteristics) {
      return this._parseCharacteristics(characteristics);
    }
  }, {
    key: 'getCharacteristics',
    value: function getCharacteristics() {
      return this._characteristics;
    }
  }, {
    key: 'increase',
    value: function increase(name, value) {
      this.add(name, value);
    }
  }, {
    key: 'decrease',
    value: function decrease(name, value) {
      this.add(name, -value);
    }
  }, {
    key: 'add',
    value: function add(name, value) {
      var index = this.getIndexByName(name);
      if (index > -1) {
        this._characteristics[index].putValue(value);
      } else {
        this._characteristics.push(new _.Characteristic({ name: name, value: value }));
      }
    }
  }, {
    key: 'getValueByName',
    value: function getValueByName(name) {
      return this.getByName(name).reduce(function (total, characteristic) {
        if (characteristic instanceof _.Characteristic && characteristic.getName() === name) {
          total += characteristic.getValue() || 0;
        }
        return total;
      }, 0);
    }
  }, {
    key: 'getIndexByName',
    value: function getIndexByName(name) {
      return this._characteristics.indexOf(this.getByName(name)[0]);
    }
  }, {
    key: 'getByName',
    value: function getByName(name) {
      return this._characteristics.filter(function (characteristic) {
        return characteristic instanceof _.Characteristic && characteristic.getName() === name;
      });
    }
  }, {
    key: '_checkDefaultCharacteristics',
    value: function _checkDefaultCharacteristics() {
      var _this = this;

      var defaults = [[_constants.characteristic.LIFE, _constants.character.LIFE], [_constants.characteristic.DEFENSE, _constants.character.DEFENSE]];
      defaults.forEach(function (characteristic) {
        return _this._addDefault.apply(_this, characteristic);
      });
    }
  }, {
    key: '_addDefault',
    value: function _addDefault(name, value) {
      if (!this.getByName(name).length) {
        this.add(name, value);
      }
    }
  }, {
    key: '_parseCharacteristics',
    value: function _parseCharacteristics(characteristics) {
      return (0, _helpers.parseToInstance)(_.Characteristic, characteristics);
    }
  }]);

  return Characteristics;
}();

exports.default = Characteristics;
module.exports = exports['default'];