'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ = require('../..');

var _helpers = require('../../../helpers');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Vest = function (_Item) {
  _inherits(Vest, _Item);

  function Vest(_ref) {
    var name = _ref.name,
        type = _ref.type,
        slotType = _ref.slotType,
        effects = _ref.effects;

    _classCallCheck(this, Vest);

    var _this = _possibleConstructorReturn(this, (Vest.__proto__ || Object.getPrototypeOf(Vest)).call(this, { name: name, type: type, slotType: slotType }));

    _this._effects = _this._parseEffects(effects);
    return _this;
  }

  _createClass(Vest, [{
    key: 'setEffects',
    value: function setEffects(effects) {
      this._effects = this._parseEffects(effects);
    }
  }, {
    key: 'getEffects',
    value: function getEffects() {
      return this._effects;
    }
  }, {
    key: '_parseEffects',
    value: function _parseEffects(effects) {
      return (0, _helpers.parseToInstance)(_.Characteristic, effects);
    }
  }]);

  return Vest;
}(_.Item);

exports.default = Vest;
module.exports = exports['default'];