'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('../../../constants');

var _SlotType = require('./SlotType');

var _SlotType2 = _interopRequireDefault(_SlotType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Item = function () {
  function Item(_ref) {
    var name = _ref.name,
        _ref$weight = _ref.weight,
        weight = _ref$weight === undefined ? 1 : _ref$weight,
        type = _ref.type,
        slotType = _ref.slotType;

    _classCallCheck(this, Item);

    this._validateType(type);
    if (!(slotType instanceof _SlotType2.default)) slotType = new _SlotType2.default(slotType);
    this._name = name;
    this._weight = weight;
    this._type = type;
    this._slotType = slotType;
  }

  _createClass(Item, [{
    key: 'setName',
    value: function setName(name) {
      this._name = name;
    }
  }, {
    key: 'getName',
    value: function getName() {
      return this._name;
    }
  }, {
    key: 'setWeight',
    value: function setWeight(weight) {
      this._weight = weight;
    }
  }, {
    key: 'getWeight',
    value: function getWeight() {
      return this._weight;
    }
  }, {
    key: 'setType',
    value: function setType(type) {
      this._validateType(type);
      this._type = type;
    }
  }, {
    key: 'getType',
    value: function getType() {
      return this._type;
    }
  }, {
    key: 'setSlotType',
    value: function setSlotType(slotType) {
      if (!(slotType instanceof _SlotType2.default)) slotType = new _SlotType2.default(slotType);
      this._slotType = slotType;
    }
  }, {
    key: 'getSlotType',
    value: function getSlotType() {
      return this._slotType;
    }
  }, {
    key: '_validateType',
    value: function _validateType(type) {
      if (!this._getTypes().includes(type)) throw new Error('Unknow item type');
    }
  }, {
    key: '_getTypes',
    value: function _getTypes() {
      return [_constants.item.EQUIPABLE, _constants.item.CONSUMABLE];
    }
  }]);

  return Item;
}();

exports.default = Item;
module.exports = exports['default'];